Async JavaScript and API Interaction
Module 10, Lesson 6


Part 1:
Exploring Asynchronous JavaScript

Objective: 
The objective of this assignment is to familiarize students with asynchronous JavaScript concepts using promises and the Fetch API, and demonstrate their practical 
application in interacting with external APIs.

Problem Statement: 
You are tasked with developing a web application that interacts with the Marvel Comics API. The application should handle asynchronous operations such as fetching 
data and updating the user interface dynamically using modern JavaScript features.

Task 1: Obtaining API Key and Configuration
Obtain an API key from the Marvel Comics API website. Investigate and understand the necessary configurations required to authenticate requests to the API.
status: COMPLETE

Task 2: Fetching Characters Using Fetch API
Implement a function to fetch Marvel Comics characters asynchronously from the API endpoint using the Fetch API and promises. Utilize the API key and configurations 
obtained in Task 1. Log the fetched characters to the console.
status: COMPLETE

Task 3: Updating User Interface Dynamically
Write a function to dynamically update the user interface with the fetched characters' information. Utilize promises and the Fetch API to ensure that the UI updates 
only after the characters are successfully fetched.
status: COMPLETE


Part 2:
Implementing Timers in JavaScript

Objective: 
The objective of this assignment is to enable students to comprehend and implement timers using intervals and timeouts in JavaScript. Through practical exercises, 
students will learn how to schedule and execute tasks at specific intervals and delays.

Problem Statement: 
You are tasked with developing a web-based countdown timer application that allows users to set a timer for a specified duration. The application should utilize 
intervals and timeouts to update the timer display dynamically and notify the user when the timer expires.

Task 1: Countdown Timer
Create a countdown timer that starts from a user-defined duration (in seconds) and updates every second until it reaches zero. Use setInterval to update the timer display.
status: incomplete

Task 2: Delayed Notification
Implement a function that displays a notification after a specified delay (in milliseconds) using setTimeout.
status: incomplete

Task 3: Repeat Notification
Develop a function that repeatedly displays a notification at fixed intervals until the user dismisses it. Use setInterval to schedule the notifications.
status: incomplete

